export default {
  action: {
    add: 'Add Action',
    api: {
      notBindAnyApi: 'Not Bind Any Api'
    },
    call: 'Call',
    codeMode: 'Code Mode',
    codeModeDesc: 'Write your code, using resolve to indicate true',
    noneType: 'None',
    notSet: 'not Set',
    output: 'Output Data',
    pageInputDesc: 'This page has input parameters, please set how to provide data for these parameters',
    pathParams: 'Path Param',
    popup: 'Popup',
    queryParams: 'Query Param',
    redirect: 'Redirect',
    redirectPage: 'Redirect Page',
    redirectType: 'Redirect Type',
    redirectUrl: 'Redirect URL',
    settingMode: 'Setting Mode'
  },
  api: {
    action: 'Action',
    addAPI: 'Add API',
    addData: 'Add Data',
    apiDetail: 'API Detail',
    bindInput: 'Bind element to set this data',
    bindInputInvalid: 'Only form elements can be bound',
    bindOutput: 'Bind element to get this data',
    editData: 'Edit Data',
    hasNewVersion: 'Has new version: {0}',
    import: 'Import',
    input: 'Input',
    pleaseInputName: 'Please input name',
    manage: 'API Manage',
    model: {
      defaultValue: 'default Value',
      name: 'Name',
      noSubField: 'Has No Field',
      comment: 'Comment',
      title: 'Title',
      type: 'Type'
    },
    noInputs: 'No Input',
    noOutputs: 'No Output',
    output: 'Output',
    outputDataDesc: 'This will output data to the UI it is connected to',
    outputAS: 'Output AS',
    postProcessors: 'Post Processors',
    update: 'Update',
    when: 'When'
  },
  common: {
    action: 'Action',
    add: 'Add',
    addBlankPage: 'Add Blank Page',
    addFolder: 'Add Folder',
    addPage: 'Add Page',
    align: 'Align',
    alignCenter: 'Center',
    alignLeft: 'Left',
    alignRight: 'Right',
    api: 'API',
    areYouSure: 'Are you sure',
    base: 'Base UI',
    bottom: 'Bottom',
    build: 'Build',
    buildNow: 'Build now?',
    cancel: 'Cancel',
    choose: 'Choose...',
    chooseIcon: 'Choose Icon',
    clickLeftModule: 'Click left module panel to choose page',
    cleanup: 'Cleanup',
    close: 'Close',
    copy: 'Copy',
    copyPageConfirm: 'Are you sure you want to copy this page',
    commitMessage: 'Commit Message',
    createComponent: 'Create Component',
    customCode: 'Custom Code',
    dataSource: 'Data Source',
    delete: 'Delete',
    device: 'Device',
    deviceAuto: 'Auto',
    deviceLandscape: 'Landscape',
    devicePC: 'PC',
    devicePortrait: 'Portrait',
    deviceTablet: 'Tablet',
    discuss: 'Discuss',
    dragtohere: 'Drag UI To Here',
    edit: 'Edit',
    effect: 'Effect',
    empty: 'Empty',
    endpoint: 'Endpoint',
    event: 'Event',
    eventShow: 'Show Event',
    eventShowDesc: 'Show event info panel of ui bound',
    function: 'Function',
    fontName: 'Font Name',
    fontNameEmpty: 'Please Input Font Name',
    goBack: 'Go Back',
    icon: 'Icon',
    idIsInvalidate: 'ID is invalidate',
    image: 'Image',
    import: 'Import',
    left: 'Left',
    module: 'Module',
    my: 'My UI',
    none: 'None',
    notsave: 'Not Save',
    notSaveInfo: 'Your content not save, are you sure?',
    notSpecified: 'not specified',
    ok: 'OK',
    operationFail: 'operation fail, please try again',
    orCustom: 'Or Custom',
    outline: 'Outline',
    page: 'Page',
    pageData: 'Page Data',
    pageHasBeenDeletedByOtherUser: 'Page has been deleted by user {0}',
    pageHasBeenModifiedByOtherUser: 'Page has been modified by user {0}, page will be reload',
    pleaseSelectUIItem: 'Select an element on the canvas to activate this panel',
    pleaseWait: 'Please wait',
    position: 'Position',
    popup: 'Popup',
    preset: 'Preset',
    preview: 'Preview',
    project: 'Project UI',
    quit: 'Quit',
    readonly: 'Readonly',
    remove: 'Remove',
    rename: 'Rename',
    right: 'Right',
    save: 'Save',
    saveAsVersion: 'Save as version',
    saved: 'Saved',
    saving: 'Saving',
    search: 'Search',
    selectFile: 'Select File',
    setting: 'Setting',
    snapshotting: 'Snapshotting',
    socketNotConnect: 'Socket Disconnected',
    somebodyComeIn: 'Other Users',
    somebodyComeInTip: 'Please pay attention to avoid conflict when saving. When multiple people open the page, it\'s best to be edited by only one person',
    style: 'Style',
    theme: 'Theme',
    top: 'Top',
    upload: 'Upload',
    uploaded: 'Uploaded',
    ui: 'UI',
    uicomponent: 'UI Component',
    uicomponentDeleted: 'UI COMPONENT [{0}] HAS BEEN DELETED',
    uicomponentEditTip: 'This page is a ui component, modifications will affect all instances',
    uicomponentInstance: '{0} instances',
    uicomponentNestTip: 'UI Component cannot contain oneself.',
    useThisUI: 'Use',
    variable: 'Variable',
    view: 'View'
  },
  event: {
    add: 'Add Event',
    api: {
      call: 'Call API',
      webapi: 'Web API',
      popup: 'popup'
    },
    bind: 'Bind Event',
    bindAPI: 'Bind API',
    bindTip: 'Bind event to UI',
    deleteConfirm: 'Are you sure?',
    error: {
      bindAPIEmpty: 'Please select api to bind',
      bindActionEmpty: 'Please select action',
      bindEventEmpty: 'Please select event',
      notDefined: 'Not Defined'
    },
    interactive: 'Interactive',
    keyboard: 'Keyboard',
    'life cycle': 'Life Cycle',
    mouse: 'Mouse',
    notBindEvent: 'Not bind event',
    popupDesign: 'Design'
  },
  module: {
    addFunction: 'Add Function',
    addModule: 'Add Module',
    deleteFunction: 'Delete Function',
    deleteModule: 'Delete Module',
    deleteModuleConfirm: 'This action cannot be undone. You will lose this module\'s funciton, page, ui and api, please input the module name {0} to delete'
  },
  page: {
    alert: 'Alert dialog',
    blank: 'Blank Page',
    boxModel: 'Box Model',
    boxModelTip: 'Box Model Layuot',
    choosePage: 'Choose page',
    code: 'Export Code',
    confirm: 'Confirm dialog',
    copyPage: 'Copy this page',
    custom: 'Custom dialog',
    deletePage: 'Move to Trash',
    deletePageConfirm: 'Page will move to Trash, you can put it back anytime',
    editPage: 'click to rename',
    exportSetting: 'Export Setting',
    file: 'File Name',
    fileTip: 'File Name when compile and saved in folder, exclude ext',
    homePage: 'Home Page',
    loading: 'Loading',
    lockPage: 'Lock/Unlock this page',
    name: 'Page',
    pleaseChoosePopupType: 'Please choose popup type',
    prompt: 'Prompt dialog',
    setting: 'Setting',
    title: 'Title',
    toast: 'Toast',
    url: 'Router Path',
    urlTip: 'URL is the page mapped for router, start with /'
  },
  project: {
    name: 'Project',
    setting: 'Setting'
  },
  style: {
    addSelector: 'Add Selector',
    alpha: 'Alpha',
    badge: {
      hoverable: 'Hoverable',
      pill: 'Pill'
    },
    base: {
      desc: 'Desc.',
      name: 'Base',
      title: 'Title'
    },
    background: {
      addColor: 'Add Color',
      addGradient: 'Add Gradient',
      addImage: 'Add Background Image',
      attachment: 'Attachment',
      attachmentFixed: 'Fixed',
      attachmentLocal: 'Local',
      attachmentScroll: 'Scroll',
      background: 'Background',
      backgroundForeground: 'Background & Foreground',
      blend: {
        color: 'Color',
        'color-dodge': 'Color Dodge',
        darken: 'Darken',
        lighten: 'Lighten',
        luminosity: 'Luminosity',
        multiply: 'Multiply',
        normal: 'Normal',
        overlay: 'Overlay',
        saturation: 'Saturation',
        screen: 'Screen'
      },
      blendMode: 'Blend Mode',
      borderbox: 'Border Box',
      cententbox: 'centent Box',
      clip: 'Clip',
      deleteImage: 'Delete Image',
      foreground: 'Foreground',
      gradient: 'Gradient',
      gradientCircle: 'Circle',
      gradientClosestCorner: 'Closest Corner',
      gradientClosestSide: 'Closest Side',
      gradientEllipse: 'Ellipse',
      gradientFarthestCorner: 'Farthest Corner',
      gradientFarthestSide: 'Farthest Side',
      gradientLinear: 'Linear',
      gradientRadial: 'Radial',
      image: 'Image',
      noRepeat: 'No Repeat',
      origin: 'Origin',
      paddingbox: 'Padding Box',
      positionX: 'X',
      positionY: 'Y',
      radialWidth: 'Width',
      radialHeight: 'Height',
      repeat: 'Repeat',
      repeatX: 'Repeat X',
      repeatY: 'Repeat Y',
      size: 'Size',
      sizeContain: 'Contain',
      sizeCover: 'Cover',
      sizeLength: 'Length',
      text: 'Text'
    },
    backgroundColor: 'Background Color',
    backgroundImage: 'Background Image',
    border: 'Border',
    'border-bottom': 'Border Bottom',
    'border-bottom-left-radius': 'Bottom Left Radius',
    'border-bottom-right-radius': 'Bottom Right Radius',
    'border-left': 'Border Left',
    'border-right': 'Border Right',
    'border-top': 'Border Top',
    'border-top-left-radius': 'Top Left Radius',
    'border-top-right-radius': 'Top Right Radius',
    borderColor: 'Border Color',
    borderOutline: 'Border & outline',
    borderStyle: 'Border Style',
    button: {
      groupBtn: 'Group Button',
      linkHref: 'link Href',
      outline: 'Outline',
      type: 'Type'
    },
    byClass: 'By Class',
    byCustomClass: 'By Custom Class',
    byValue: 'By value',
    card: {
      drapTip: 'Please Drag component in here',
      footless: 'Footless',
      headless: 'Headless'
    },
    carousel: {
      addSlide: 'Add Slide',
      effect: 'Effect',
      effectSlide: 'Slide',
      effectCrossfade: 'Crossfade',
      interval: 'Interval',
      showControl: 'With Controls',
      showIndicator: 'With Indicators',
      slide: 'Slide'
    },
    class: 'Class',
    cleanupTip: 'Clean up unused styles',
    color: 'Color',
    collapse: {
      addItem: 'Add Item',
      item: 'Item'
    },
    componentType: 'Component Type',
    container: {
      align: 'Align',
      gutter: 'Gutter',
      justify: 'Justify',
      type: 'Type',
      wrap: 'Wrap'
    },
    dropdown: {
      direction: 'Direction',
      directionDown: 'Down',
      directionLeft: 'Left',
      directionRight: 'Right',
      directionUp: 'Up',
      itemType: 'Type',
      menuAlign: 'Menu alignment',
      menuAlignLeft: 'Left',
      menuAlignRight: 'Right',
      splitBtn: 'Split Button'
    },
    elementsAffectedOnThisPage: 'Elements affected on this page',
    elementsAffectedOnOtherPage: 'Elements affected on other page',
    componentsAffected: 'Components affected',
    empty: 'No Setting',
    existingClasses: 'Existing Classes',
    file: {
      accept: 'Accept',
      acceptTip: 'Such as image/*',
      multiple: 'Multiple'
    },
    form: {
      addValue: 'Add Value',
      autocomplete: 'Autocomplete',
      autoSize: 'Auto Size',
      borderless: 'Borderless',
      clearButton: 'Clear Button',
      default: 'Default',
      form: 'Form',
      helpTip: 'Help Tip',
      inline: 'Inline',
      inputName: 'Name',
      inputType: 'Type',
      inputTypeColor: 'Color',
      inputTypeDate: 'Date',
      inputTypeEmail: 'Email',
      inputTypeNumber: 'Number',
      inputTypePassword: 'Password',
      inputTypeText: 'Text',
      inputTypeURL: 'URL',
      max: 'Max',
      maxLength: 'Max Length',
      min: 'Min',
      multiple: 'Multiple',
      placeholder: 'Placeholder',
      pureMode: 'Pure Mode',
      required: 'Required',
      requiredDesc: '',
      row: 'Row',
      searchable: 'Searchable',
      size: 'Size',
      state: 'State',
      stateDisabled: 'Disabled',
      stateHidden: 'Hidden',
      stateNormal: 'Normal',
      stateReadonly: 'Readonly',
      step: 'Step',
      taggable: 'Taggable',
      text: 'Text',
      title: 'Title',
      value: 'Value',
      values: 'Values',
      valueTip: 'Value is required',
      wordCount: 'Word Count'
    },
    horizontal: 'Horizontal',
    horizontalTip: 'parent container need specify type info',
    hr: {
      tip: 'You can set height by layout panel, set line style by border panel'
    },
    href: 'Href',
    icon: {
      notChooseIconTip: 'Please choose from style panel',
      size: 'Size'
    },
    image: {
      objectFit: 'Fit',
      objectFitTip: 'Please set the Width and Height first',
      objectPosition: 'Position',
      src: 'SRC'
    },
    layout: {
      alignContent: 'Align Content',
      alignItem: 'Align Item',
      basis: 'Basis',
      bottom: 'Bottom',
      clearFloat: 'Clear float',
      css: 'CSS',
      deviceSize: 'Device Size',
      direction: 'Direction',
      display: 'Display',
      float: 'Float',
      grid: 'Grid',
      gridTip: 'Pay attention to the DEVICE SIZE when set grid and offset',
      grow: 'Grow',
      height: 'Height',
      justify: 'Justify',
      layout: 'Layout',
      left: 'Left',
      maxSize: 'Max Size',
      minSize: 'Min Size',
      offset: 'Offset',
      overflow: 'Overflow',
      position: 'Position',
      right: 'Right',
      shrink: 'Shrink',
      size: 'Fixed Size',
      top: 'Top',
      width: 'Width',
      widthTip: 'pixels or %',
      wrap: 'Wrap',
      xOverflow: 'X Overflow',
      yOverflow: 'Y Overflow',
      zIndex: 'z-index'
    },
    list: {
      flush: 'Flush'
    },
    margin: 'Margin',
    'margin-bottom': 'Margin Bottom',
    'margin-left': 'Margin Left',
    'margin-right': 'Margin Right',
    'margin-top': 'Margin Top',
    modal: {
      backdrop: 'Backdrop',
      backdropTip: 'Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn\'t close the modal on click.',
      drapTip: 'Please Drag component in here',
      esc: 'Esc',
      escTip: 'Closes the modal when escape key is pressed',
      footless: 'Footless',
      headless: 'Headless',
      position: 'Position'
    },
    nav: {
      fill: 'Fill',
      justified: 'Justified',
      type: 'Type'
    },
    newClass: 'New Class',
    newClassTip: 'Type to create a new class',
    noSetting: 'No Setting',
    outlineColor: 'Outline Color',
    outlineStyle: 'Outline Style',
    outlineWidth: 'Outline Width',
    padding: 'Padding',
    'padding-bottom': 'Padding Bottom',
    'padding-left': 'Padding Left',
    'padding-right': 'Padding Right',
    'padding-top': 'Padding Top',
    pleaseSelectSelector: 'Please select selector',
    predefinedClass: 'Predefined',
    progress: {
      animatedStripes: 'Animated Stripes',
      label: 'Label',
      striped: 'Striped'
    },
    radius: 'Radius',
    radiusSize: 'Radius Width',
    rangeInput: {
    },
    richText: {
      content: 'Rich Text Content',
      placeholder: 'double click to edit content'
    },
    selector: 'Style Selector',
    selectorName: 'Selector Name',
    selectorNameTip: 'Please input selector name',
    selectorDefine: 'Style Selector Define',
    sizing: 'Sizing',
    table: {
      accented: 'Accented',
      alignmentBottom: 'Bottom',
      alignmentCenter: 'Center',
      alignmentLeft: 'Left',
      alignmentMiddle: 'Middle',
      alignmentRight: 'Right',
      alignmentTop: 'Top',
      border: 'Border',
      bordered: 'Bordered',
      borderless: 'Borderless',
      data: 'Data Source',
      edit: 'Edit Data',
      footer: 'Footer',
      footless: 'Footless',
      grid: 'Grid Line',
      header: 'Header',
      headless: 'Headless',
      horizontalAlignment: 'Horizontal Alignment',
      hoverableRow: 'Hoverable Row',
      import: 'Import (csv, xls, xlsx)',
      normal: 'Normal',
      rounded: 'Rounded',
      small: 'Small',
      stripedRow: 'Striped Row',
      verticalAlignment: 'Vertical Alignment'
    },
    text: {
      bold: 'Bold',
      break: 'Break',
      font: 'Font & Style',
      fontFamily: 'Font Family',
      fontSize: 'Font size',
      H1: 'Heading 1',
      H2: 'Heading 2',
      H3: 'Heading 3',
      H4: 'Heading 4',
      H5: 'Heading 5',
      H6: 'Heading 6',
      Heading: 'Heading',
      italic: 'Italic',
      letterSpacing: 'Letter Spacing',
      lineHeight: 'Line height',
      lineThrough: 'Line through',
      Normal: 'Normal',
      Paragraph: 'Paragraph',
      textStroke: 'Text Stroke',
      textStrokeLength: 'Length',
      type: 'Type',
      underline: 'underline',
      weight: 'Weight',
      whiteSpace: 'White Space',
      wordBreak: 'Word Break',
      wordWrap: 'Word Wrap'
    },
    theme: 'Theme',
    utilities: {
      blur: 'Blur',
      hShadow: 'h-shadow',
      opacity: 'Opacity',
      shadow: 'Shadow',
      shadowType: 'Type',
      spread: 'Spread',
      vShadow: 'v-shadow'
    },
    value: 'Value',
    valueCustom: 'Custom Value',
    valueInherit: 'Inherit Value',
    width: 'Width'
  },
  table: {
    canNotParseExcel: 'Can not parse Excel'
  },
  theme: {
    colorCustomize: 'Color Customize',
    darkMode: 'Dark Mode',
    fontCustomize: 'Font Customize',
    fontFamily: 'Font Family',
    fontName: 'Font Name',
    fontDefaultSize: 'Default Font Size',
    lightMode: 'Light Mode',
    spaceCustomize: 'Space Customize',
    supportDarkMode: 'Support Dark Mode'
  },
  ui: {
    addItemTypeError: 'you can not add {0} in {1}, just allow item type: {2}',
    advance: 'Advance',
    badge: 'Badge',
    base: 'Base Component',
    breadcrumb: 'Breadcrumb',
    button: 'Button',
    buttonGroup: 'Button Group',
    buttonGroupEmptyTip: 'you can add {0} in ButtonGroup',
    card: 'Card',
    carousel: 'Carousel',
    checkbox: 'Checkbox',
    collapse: 'Collapse',
    common: 'Common Component',
    component: 'Component',
    container: 'Container',
    dropdown: 'Dropdown',
    empty: 'Empty',
    error: 'There was an error. Please try again later',
    file: 'File',
    form: 'Form Component',
    framework: 'UI Framework',
    hr: 'Hr',
    holder: 'Holder',
    icon: 'Icon',
    image: 'Image',
    info: 'UI Info',
    input: 'Input',
    list: 'List',
    modal: 'Modal',
    myUIComponent: 'My UI Component',
    myUIComponentTip: 'The UI components in this section were created by me in other projects of the same type',
    nav: 'Navigation',
    navbar: 'Navbar',
    page: 'Page',
    pagination: 'Pagination',
    projectUIComponent: 'Project UI Component',
    projectUIComponentTip: 'Components let you reuse designs in your project, To create a component, right-click an UI element on the workspace and select "Create component".',
    progress: 'Progress',
    radio: 'Radio',
    rangeInput: 'Range Input',
    richText: 'Rich Text',
    select: 'Select',
    table: 'Table',
    text: 'Text',
    textarea: 'Textarea',
    type: 'Type',
    uicomponent: 'UI Component',
    utilities: 'Utilities'
  },
  uiexport: {
    desc: 'Components let you reuse designs in your project',
    notExportEvent: 'This component contains event or data bindings, which will not be exported when used as a component; If the component has its own logical encapsulation, it needs to be modified separately for binding after export',
    error: 'Export Error',
    createComponent: 'Create Component',
    name: 'UI Name',
    nameIsEmpty: 'Please Type UI Name',
    success: 'Export Success, you can edit component from the left project panel'
  },
  variable: {
    bound: 'Bound Variable',
    boundTypeMismatch: 'Type mismatch, bound type can only be {0}',
    globalScope: 'Global Scope',
    literal: 'Literal',
    localScope: 'Local Scope',
    needBoundVariable: '{0} need bound one variable',
    pageScope: 'page Scope'
  }
}
